// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parking.Api.Data;

#nullable disable

namespace Parking.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Parking.Api.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("Endereco")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("endereco");

                    b.Property<bool>("Mensalista")
                        .HasColumnType("boolean")
                        .HasColumnName("mensalista");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone");

                    b.Property<decimal?>("ValorMensalidade")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_mensalidade");

                    b.HasKey("Id");

                    b.HasIndex("Nome", "Telefone")
                        .IsUnique();

                    b.ToTable("cliente", "public");
                });

            modelBuilder.Entity("Parking.Api.Models.Fatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Competencia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("competencia");

                    b.Property<DateTime>("CriadaEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criada_em");

                    b.Property<string>("Observacao")
                        .HasColumnType("text")
                        .HasColumnName("observacao");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId", "Competencia")
                        .IsUnique();

                    b.ToTable("fatura", "public");
                });

            modelBuilder.Entity("Parking.Api.Models.FaturaVeiculo", b =>
                {
                    b.Property<Guid>("FaturaId")
                        .HasColumnType("uuid")
                        .HasColumnName("fatura_id");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("veiculo_id");

                    b.HasKey("FaturaId", "VeiculoId");

                    b.ToTable("fatura_veiculo", "public");
                });

            modelBuilder.Entity("Parking.Api.Models.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Ano")
                        .HasColumnType("integer")
                        .HasColumnName("ano");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("Modelo")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("modelo");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("placa");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.ToTable("veiculo", "public");
                });

            modelBuilder.Entity("Parking.Api.Models.VeiculoHistorico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("Fim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fim");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inicio");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("veiculo_id");

                    b.HasKey("Id");

                    b.HasIndex("VeiculoId");

                    b.HasIndex("ClienteId", "Inicio");

                    b.ToTable("veiculo_historico", "public");
                });

            modelBuilder.Entity("Parking.Api.Models.FaturaVeiculo", b =>
                {
                    b.HasOne("Parking.Api.Models.Fatura", null)
                        .WithMany("Veiculos")
                        .HasForeignKey("FaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parking.Api.Models.Veiculo", b =>
                {
                    b.HasOne("Parking.Api.Models.Cliente", "Cliente")
                        .WithMany("Veiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Parking.Api.Models.VeiculoHistorico", b =>
                {
                    b.HasOne("Parking.Api.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Parking.Api.Models.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Parking.Api.Models.Cliente", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Parking.Api.Models.Fatura", b =>
                {
                    b.Navigation("Veiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
